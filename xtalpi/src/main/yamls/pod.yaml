apiVersion: v1          # 指定api版本，此值必须在kubectl api-versions 中          【必选】
kind: Pod               # 指定创建资源的角色/类型 Pod Deployment                  【必选】
metadata:               # 资源的元数据/属性                                      【必选】
  name: web04-pod       # 资源的名字，在同一个namespace中必须唯一                   【必选】
  namespace: holy       # 该资源的名称空间，缺省为当前用户的名称空间或default         【必选】
  labels:               # 设定资源的标签，详情请见http://blog.csdn.net/liyingke112/article/details/77482384
    k8s-app: apache
    version: v1
    kubernetes.io/cluster-service: "true"
  annotations:             # 自定义注解列表
    - name: String         # 自定义注解名字

spec:                      # specification of the resource content 指定该资源的内容
  replicas: 1	             # 使用该 “资源” 创建一个应用程序实例
  selector:                # 标签选择器，与上面的标签共同作用
    matchLabels:           # 选择包含标签app:nginx的资源
      app: nginx
  template:                # 选择或创建的Pod的模板
    metadata:              # Pod的元数据
      labels:              # Pod的标签，上面的selector即选择包含标签app:nginx的Pod
        app: nginx
    spec:                  # 期望Pod实现的功能（即在pod中部署）
      containers:          # 生成container，与docker中的container是同一种
      - name: nginx	       # container的名称
        image: nginx:1.7.9 # 使用镜像nginx:1.7.9创建container，该container默认80端口可访问


  restartPolicy: Always    # 表明该容器一直运行，默认k8s的策略，在此容器退出后，会立即创建一个相同的容器 always， OnFaliure， Nerver
  imagePullSecrets:
    name: String
    secret: String
  hostNetwork: true        # 默认值 false， 使用宿主机挽留过，不适用 docker 网桥，无法在同一主机启动第二个副本

  nodeSelector:            # 节点选择，先给主机打标签kubectl label nodes kube-node1 zone=node1
    zone: node1
  containers:
  - name: web04-pod        # 容器的名字
    image: web:apache      # 容器使用的镜像地址
    imagePullPolicy: Never # 三个选择Always、Never、IfNotPresent，每次启动时检查和更新（从registery）images的策略，
                           # Always，每次都检查
                           # Never，每次都不检查（不管本地是否有）
                           # IfNotPresent，如果本地有就不检查，如果没有就拉取
    command: ['sh']        # 启动容器的运行命令，将覆盖容器中的Entrypoint,对应Dockefile中的ENTRYPOINT
    args: ["$(str)"]       # 启动容器的命令参数，对应Dockerfile中CMD参数
    workingDir: /home/     # 指定进入容器时的目录
    env:                   # 指定容器中的环境变量
    - name: str            # 变量的名字
      value: "/etc/run.sh" # 变量的值
    resources:             # 资源管理，请求请见http://blog.csdn.net/liyingke112/article/details/77452630
      requests:            # 容器运行时，最低资源需求，也就是说最少需要多少资源容器才能正常运行
        cpu: 0.1           # CPU资源（核数），两种方式，浮点数或者是整数+m，0.1=100m，最少值为0.001核（1m）
        memory: 32Mi       # 内存使用量
      limits:              # 资源限制
        cpu: 0.5
        memory: 32Mi
    ports:
    - containerPort: 80    # 容器开发对外的端口
      name: httpd          # 名称
      protocol: TCP
      hostPort: 80         # 与主机映射的端口，默认与containerPort 一致， 设置了该值，
                           # 则无法相同主机上启动该容器的相同副本，因为主机会端口冲突
    livenessProbe:         # pod内容器健康检查的设置，详情请见http://blog.csdn.net/liyingke112/article/details/77531584
      httpGet:             # 通过httpget检查健康，返回200-399之间，则认为容器正常
        path: /            # URI地址
        port: 80
        # host: 127.0.0.1  # 主机地址
        scheme: HTTP
      initialDelaySeconds: 180 # 表明第一次检测在容器启动后多长时间后开始
      timeoutSeconds: 5        # 检测的超时时间
      periodSeconds: 15        # 检查间隔时间
      # 也可以用这种方法
      # exec: 执行命令的方法进行监测，如果其退出码不为0，则认为容器正常
      #  command:
      #    - cat
      #    - /tmp/health
      # 也可以用这种方法
      # tcpSocket:     // 通过tcpSocket检查健康
      # port: number
    lifecycle:         # 生命周期管理
      postStart:       # 容器运行之前运行的任务
        exec:
          command:
            - 'sh'
            - 'yum upgrade -y'
      preStop:         # 容器关闭之前运行的任务
        exec:
          command: ['service httpd stop']
    volumeMounts:      # 详情请见http://blog.csdn.net/liyingke112/article/details/76577520
    - name: volume     # 挂载设备的名字，与volumes[*].name 需要对应
      mountPath: /data # 挂载到容器的某个路径下
      readOnly: True
  volumes:             # 定义一组挂载设备
  - name: volume       # 定义一个挂载设备的名字
    #meptyDir: {}
    hostPath:
      path: /opt       # 挂载设备类型为hostPath，路径为宿主机下的/opt,这里设备类型支持很多种