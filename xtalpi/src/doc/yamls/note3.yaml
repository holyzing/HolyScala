controller:
    ReplicaSet|ReplicationController: 后者为最基本的controller，前者较后者多了 selector
    Deployment: 基于 ReplicaSet 可实现滚动更新，扩容缩容，挂起重启
    DaemonSet: 守护 Node 的Pod，删除它将会删除其所维护的所有Pod
               引申：POD被分配到哪个node也可以由用户来定义（标签选择或者污点）
    Job: 轻量的脚本型的任务，较cron 和 crontab 有一定的纠错能力，如果任务没有以 exitcode=0 退出，则会重新运行。
    CronJob: 在特定的时间（循环）创建 Job实现
    StatefulSet: Docker支持有状态服务的策略是增加存储卷，在k8s中提供该控制器保证部署和scale顺序
                 到目前为止，没有一个更好的方案能解决 mysql 类型的有状态服务（部署不稳定）
                 但是 mongodb 可以很稳定的部署在k8s集群中。
                 有序部署和扩展是基于initC实现的，initC不会改变mainC的内部
                 存储
    HorizontalPodAutoscaling: 自动扩容缩容（pod个数），需要其它软件支持

create|apply:
    deployment的spec中为什么没有 selector？
    无状态应用的扩容，缩小，非常简单
    scale 并不会更改其模板，，也就是说deployment 下的rs并没有被新建，所以并不是滚动更新。
    当去更新镜像的时候则会创建新的rs，实现滚动更新
    rollover：多个rollout并行时，会立即杀死先前的更新的pod，并开始创建新的pod
    echo $? kubectl 调用程序的退出码
    由于 污点 的原因，默认情况下主节点不会参与pod的调度
    cronJob 本身是创建job，所以cronJob 一般不会获取或者说受理job的成功与否

service:
    维护一个信息队列，通过RR进行实现负载均衡
    只提供4层负载均衡能力（IP和端口的转发）没有7层负载均衡（主机名和域名）
    通过ingress支持7层负载均衡
    在实际生产中，也会为service外在加一层nginx，实现双层的负载均衡以及高可用

    clusterIp：默认类型，自动分配一个仅集群内部可以访问的虚拟Ip
    NodePort：clusterIp基础上 在每个node所在的机器上暴露一个端口来实现
    LoadBalance：在NodePort的基础上，借助cloud provider创建一个外部负载均衡器，并将请求转发到NodePort
    LoadBalance：在NodePort的基础上，借助cloud provider创建一个外部负载均衡器，并将请求转发到NodePort LAAS
    externalName：引入外部服务到集群，供集群内部访问，就是将外部服务地址通过service做一层代理，基于kubeDns引入
    service的实现主要是基于kubeproxy实现

    apiserver 通过监控 kubeproxy 实现监听端点和服务发现，kubeproxy进行满足标签选择的pod监控，
    将这些pod的路由信息写到 iptables，客户端访问service也就意味着访问iptables

    ipvsadm -Ln


selector:
    多标签匹配的规则是 与关系
    headlessService：clusterIP为None的情况
                    主要为了解决hostname 和 podname 的 变化问题,通过域名访问一组 pod
                    <service-name>.<namespace-name>.svc.cluster.local
                    StatefulSet 也是基于无头服务进行一个服务访问的 固定

    ----------------------------------------------------------------
    ingress：未完成，通过官方文档进行学习,然后在通过 视频学习 ，nginx-ingress
    ----------------------------------------------------------------


存储:
    configMap

