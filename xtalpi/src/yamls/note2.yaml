k8s中的资源类型: 以适用性范围来分类
    名称空间下的资源: 指定空间名称获取资源
        工作负载型资源(workload): pod ReplicaSet Deployment StatefulSet DaemonSet, Job, CronJob
        服务发现及负载均衡型资源（service Discovery LoadBalance）: Service Ingress
        配置与存储型资源: Volume， CSI
        特殊类型的存储卷: ConfigMap，Secret，DownloadAPI（把外部环境中的信息输出给容器）

    物理集群下的资源: Namespace，Node，Role， ClusterRole, RoleBinding, ClusterRoleBinding
    元信息定义下的资源（通过指标来定义操作）: HPA，PodTemplate, LimitRange

yaml:
    数据类型: 对象 映射 哈希 字典 数据 序列 列表 纯量（scalar）
    标量: String, Boolean(false, true), Integer, Float, Null(~), Datetime, Date

DNS服务：kube-system 名称下的两个pod作为 k8s内置DNS服务， 创建pod的过程中会向该DNS服务写入名称，
        同时将那两个pod中的DNS服务配置为DNS服务器 解析k8s 集群中的各种名称。

Pod生命周期:
    kubectl 调用 APIServer下发指令，APIServer 同步 ETCD 信息，kubelet 从 etcd同步信息，准备创建POD

    1-初始化 pause 容器
    2-启动InitC并运行，他们为整个pod 运行应用容器提前创建一些先决条件，
      它们都是按序完成逐个启动并“运行完成退出”的，
      如果中途有个容器启动或者运行失败，则pod会根据restartPollicy进行重启或者直接宕掉。
    3-在所有的initC运行成功之前，service 不会去 聚集 mainC 的端口的信息，
      正在初始化的POD的状态为pending，但会设置 initializing 字段设置为 true
    4-如果POD重启所有intC都必须重新执行，每次重启POD过程中initC的执行结果必须是幂等的
    5-对于已经运行的POD, intC的spec的修改只能限制在 image 字段，修改其它字段不会生效,
      如果修改其image，则等价于POD的重启。
    6-initC具有应用容器的所有字段，除了 readinessProbe 和 livenessProbe，因为Init容器
       无法定义不同于不同于完成（completion）的就绪（readiness）之外的其它状态，
       这会在验证过程中被强制执行。
    7- POd中每个容器的name必须唯一，如果出现重复，则会报错。但是一组InitC对外暴露的端口可以一致，
       因为他们是串行执行的。


      初始化容器的作用：
        （1）包含一些工具，这些工具用来为应用容器构建运行环境，在环境构建好之后，应释放资源。
            而没必要在应用容器中去运行这些工具，从而造成应用容器的臃肿
        （2）分权限进行应用容器的资源获取，initC 可以访问 secret 的权限，而且也可以访问应用容器挂载目录，
            当应用容器需要高权限的资源时，可以由initC写入到应用容器中。
        （3）阻塞或者延迟并行化运行的一个应用容器的启动，直到满足一组先决条件为止。
            比如Apache访问mysql中，Apache必须在mysql启动之后才能启动，所以在
            Apache的InitC中可以完成mysql容器启动的探测，并阻塞Apache的启动。
            直到mysql启动之后，InitC完成并退出，然后启动Apache
        （4）但是一般不会用initC做探测，因为initC在探测成功之后就会退出，不能做持续性探测，比如liveness

    探测：
      探针是由 kubelet对容器执行的定期诊断。要执行诊断，kubelet 调用容器实现的Handler。
      ExecAction: 在容器内执行指定命令。如果命令退出时返回码为0，则认为诊断成功。
      TcpSocketAction: 对指定端口上的容器的IP地址执行TCP检查。如果端口打开，则诊断被认为是成功的。
      HTTPGetAction: 对指定的端口和路径上的容器的 IP地址执行 Http get 请求，通过响应码判断诊断结果
      成功 失败 未知

      livenessProbe：指示容器是否正在运行。如果存活探测失败，则 kubelet 会杀死容器，并且容器（pod）将
                     受到其 重启策略 的影响。如果容器不提供存活探针，则默认状态为 Success
      readinessProbe：指示容器是否准备好服务请求。如果就绪探测失败，端点控制器将从与 Pod 匹配的
                      所有 Service 的端点中删除该 Pod 的 IP 地址。初始延迟之前的就绪状态默认为 Failure。
                      如果容器不提供就绪探针，则默认状态为 Success

      Pod 的 status 字段是一个 PodStatus 对象，PodStatus中有一个 phase 字段。
      Pod 的相位（phase）是 Pod 在其生命周期中的简单宏观概述。
          该阶段并不是对容器或 Pod 的综合汇总，也不是为了做为综合状态机Pod 相位的数量和含义是严格指定的。
          除了本文档中列举的状态外，不应该再假定 Pod 有其他的 phase 值
          pod 的状态: 包含 规约部分和实际状态部分，这些信息被记录在 pod 对象的 Conditions 中。
                     如果应用需要，也可以注入自定义的就绪性信息。
          container: waiting running terminated
          pod: pending running succeeded failed unknown


    1- 请求指令下达到 API接口，并将指令下达给kubelet
    2- scheduler 将新 pod 分配到某个节点上，pod没有自愈能力，
       由抽象的 controller 策略来管理， kubelet 实现对该pod的构建和注册等。
    3- Pod 一旦被调度到某个节点上，那么这个Pod 实例始终就在该节点上，直到 pod 实例被停止或者删除。
    4- 一个包含多个容器的 Pod 中包含一个用来拉取文件的程序和一个 Web 服务器， 均使用持久卷作为容器间共享的存储。
       还有一个用于网络栈共享的pause 容器。

-- -------------------------------------------------------------------------------------------------
1-命令式编程（开发人员）
2-声明式编程（实际用户）幂等 sql 后有引擎
-- -------------------------------------------------------------------------------------------------


pods
ingress
services
namespaces
deployments

kubectl
    get -n -A --show-labels -o yaml -w

    set iamge deployment/name containerName=imageName:tag
    scale deployment deploymentName --replicas 10
    rollout undo --to-reversion |status|history|pause deployment/deploymentName

    label pod --overwrite=true
    apply                     # 声明式 Deployment
    create --record           # 命令式 ReplicationSet
    delete --all
    expose
    cordon
    explain
    describe
    logs -f -c
    exec pod-name -c -it -- /bin/sh
    watch kubectl get pods -l app=nginx



port            : service 暴露给集群内部节点访问的端口
hostPort        : 指定POD所在node映射到pod上的端口
nodePort        : service 暴露服务给外部的方式，同时也指定了暴露的端口
targetPort      : 容器的端口（最终的流量端口）。targetPort是pod上的端口，从port和nodePort上来的流量，
                  经过kube-proxy流入到后端pod的targetPort上，最后进入容器。
containerPort   : 容器内部使用的端口


